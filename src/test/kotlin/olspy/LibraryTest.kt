/*
 * This source file was generated by the Gradle 'init' task
 */
package olspy

import io.ktor.http.*
import io.ktor.util.*
import kotlinx.coroutines.runBlocking
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json
import kotlinx.serialization.json.JsonArray
import java.io.File
import java.nio.ByteBuffer
import kotlin.test.*

class LibraryTest {
    val data = File("src/test/resources/test-data.txt")
        .readLines()
        .map { it.trim() }
        .filter { it.isNotEmpty() && it[0] != '#' }
        .associate {
            val xs = it.split("=", limit = 2)
            xs[0].trimEnd() to xs[1].trimStart()
        }

    val proxy = Proxy(Proxy.Type.HTTP, InetSocketAddress("localhost", 8888))
    val conf = ProjectConfig(proxy = proxy, debug = false)

    @Test fun someLibraryMethodReturnsTrue() {
        val classUnderTest = Library()
        assertTrue(classUnderTest.someLibraryMethod(), "someLibraryMethod should return 'true'")
    }

    @Test
    fun runHTTP() {
        val l = Library()
        println(l.httpRequestTemplate(proxy))
    }

    @Test
    fun openProject() = runBlocking {
        val proj = Project.open(Url(data["share link"]!!), conf)

        require(proj.id == data["project id"]!!)

    }

    @Test
    fun openProjectToken() = runBlocking {
        val proj = Project.open(
            Url(data["base url"]!!),
            data["project id"]!!,
            data["email"]!!,
            data["password"]!!,
            conf
        )

        require(proj.id == data["project id"]!!)
    }

    @Test
    fun testCompile() = runBlocking {
        val proj = Project.open(Url(data["share link"]!!), conf)
        val res = proj.compile()
        println(res)
        assertTrue(res.isSuccessful)
        assertEquals("output.pdf", res.pdf?.path)
    }

    @Test
    fun printTestData()
    {
        println(data)
    }

    @Test
    fun stringDecodeTest()
    {
        val str = "big sneeder"
        val blob = ByteBuffer.wrap(str.toByteArray(Charsets.UTF_8))
        blob.getInt()
        println(blob.decodeString(Charsets.UTF_8))
    }

    @Serializable
    data class Foobar(val foo : String, val bar : JsonArray)

    @Test
    fun parseJsonTest()
    {
        println(Json.decodeFromString<Foobar>("{ \"foo\" : \"aaaaa\", \"bar\" : [ 42, \"aaa\" ] }"))
//        println(Json.decodeFromString<Foobar>("{ \"foo\" : \"aaaaa\" }"))
 //       println(Json.decodeFromString<Foobar>("{  }"))
//        println(Json.decodeFromString<Foobar>("{ \"foo\" : \"aaaaa\", \"bar\" : \"sneed\" }"))
    }

    @Test
    fun documentGet() = runBlocking {
        println("OPENING PROJECT....")
        val proj = Project.open(Url(data["share link"]!!), conf)
        println("JOINING....")
        val sess = proj.join()
        println("AWAITING INFO....")
        val args = sess.getProjectInfo()

        println(args)
        println("RETRIEVING DOCUMENT....")
        val lines = sess.getDocument(args.project.rootDocID)
        println(lines)

        sess.close()
        println("CLOSED OK")
    }
}
